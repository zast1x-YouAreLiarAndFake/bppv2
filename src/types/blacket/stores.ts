// autogenerated with a script
import { Message } from "blacket-types";
import { ReactNode } from "react";
import { Socket } from "socket.io-client";
import { PublicUser } from "blacket-types";
import { LeaderboardEntity } from "blacket-types";
import { Pack } from "blacket-types";
import { CSSProperties } from "react";
import { Font } from "blacket-types";


export interface ChatStoreContext {
    messages: Message[];
    usersTyping: { userId: string, startedTypingAt: number }[];
    replyingTo: Message | null;
    setReplyingTo: (message: Message | null) => void;
    fetchMessages: (room: number) => void;
    sendMessage: (content: string) => void;
    startTyping: () => void;
}

export interface UserTyping {
    userId: string;
    startedTypingAt: number;
}
export interface Config {
    version: string
}

export interface ConfigStoreContext {
    config: Config | null,
    setConfig: (config: Config) => void
}
export interface LoadingStoreContext {
    loading: boolean | string;
    setLoading: (loading: boolean | string) => void;
}

export interface Modals {
    id: string;
    modal: ReactNode;
}

export interface ModalStoreContext {
    modals: Modals[];
    setModals: (modals: { id: string, modal: ReactNode }[]) => void;
    createModal: (modal: ReactNode) => string;
    closeModal: () => void;
}


export interface SocketStoreContext {
    socket: Socket | null,
    connected: boolean,
    initializeSocket: () => void
}


export interface CachedUserStoreContext {
    cachedUsers: PublicUser[];
    setCachedUsers: (cachedUsers: PublicUser[]) => void;
    addCachedUser: (userId: string) => void;
    addCachedUserWithData: (user: PublicUser) => void;
}

enum PlacementType {
    TOKEN = "tokens",
    EXPERIENCE = "experience"
}

export interface LeaderboardStoreContext {
    sortBy: PlacementType;
    setSortBy: (sortBy: PlacementType) => void;
    leaderboard: LeaderboardEntity | null;
    setLeaderboard: (leaderboard: LeaderboardEntity) => void;
}


export interface PackStoreContext {
    packs: Pack[];
    setPacks: (packs: Pack[]) => void;
}


export interface ContextMenu {
    items: Array<{
        divider?: boolean;
        icon?: string;
        color?: string;
        onClick?: () => void;
        label?: string;
    }>;
    x?: number;
    y?: number;
}

export interface ContextMenuContext {
    contextMenu: ContextMenu | null;
    setContextMenu: (contextMenu: ContextMenu) => void;
    openContextMenu: (items: ContextMenu["items"]) => void;
    closeContextMenu: () => void;
}

export interface ContainerProps {
    visible: boolean;
    top: CSSProperties["top"];
    left: CSSProperties["left"];
    children: ReactNode;
}

export interface ItemProps {
    icon?: string;
    color?: string;
    children: ReactNode;
    onClick: () => void;
}


export interface FontStoreContext {
    fonts: Font[],
    setFonts: (fonts: Font[]) => void
}
